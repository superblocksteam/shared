/* eslint-disable */
"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/UuidSchema","definitions":{"UuidSchema":{"type":"string","format":"uuid"}}};const schema12 = {"type":"string","format":"uuid"};const formats0 = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;const _errs0 = errors;if(typeof data !== "string"){let dataType0 = typeof data;let coerced0 = undefined;if(!(coerced0 !== undefined)){if(dataType0 == "number" || dataType0 == "boolean"){coerced0 = "" + data;}else if(data === null){coerced0 = "";}else {validate10.errors = [{instancePath,schemaPath:"#/definitions/UuidSchema/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}if(coerced0 !== undefined){data = coerced0;if(parentData !== undefined){parentData[parentDataProperty] = coerced0;}}}if(errors === _errs0){if(errors === _errs0){if(typeof data === "string"){if(!(formats0.test(data))){validate10.errors = [{instancePath,schemaPath:"#/definitions/UuidSchema/format",keyword:"format",params:{format: "uuid"},message:"must match format \""+"uuid"+"\""}];return false;}}}}validate10.errors = vErrors;return errors === 0;}